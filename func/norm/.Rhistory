M <- 1000
D <- 800
stat <- K(Z)
perm <- if (exact) exact_perm(Z[1:5], Z[6:10]) else t(replicate(D,sample(Z)))
exact_perm <- function(X, Y) {
perms <- c(X,Y)
for (i in 1:5)
for (j in 1:5) {
x <- X
y <- Y
tmp <- x[i]
x[i] <- y[j]
y[j] <- tmp
perms <- rbind(perms, c(x,y))
}
i <- c(1,2,1,2)
while(TRUE) {
x <- X
y <- Y
tmp <- x[c(i[1],i[2])]
x[c(i[1],i[2])] <- y[c(i[3],i[4])]
y[c(i[3],i[4])] <- tmp
perms <- rbind(perms, c(x,y))
if (i[4] > 4) {
if (i[3] > 3) {
if (i[2] > 4) {
if (i[1] > 3)
break
else {
i[1] <- i[1]+1
i[2] <- i[1]+1
i[3] <- 1
i[4] <- 2
}
} else {
i[2] <- i[2]+1
i[3] <- 1
i[4] <- 2
}
} else {
i[3] <- i[3]+1
i[4] <- i[3]+1
}
} else {
i[4] <- i[4]+1
}
}
perms
}
exact = FALSE
perm <- if (exact) exact_perm(Z[1:5], Z[6:10]) else t(replicate(D,sample(Z)))
stat <- c(stat, t(apply(perm,1,function(Zp) { K(Zp, A) })))
stat <- c(stat, t(apply(perm,1,function(Zp) { K(Zp) })))
stat
res <- c(rowMeans(apply(stat[-1,], 1, function(x) x > stat[1,])),
t.test      = t.test(Z[1:n], Z[(n+1):(2*n)],var.equal = FALSE)$p.value,
var.test    = var.test(Z[1:n], Z[(n+1):(2*n)])$p.value
) < alpha
res <- c(rowMeans(apply(stat[-1], 1, function(x) x > stat[1])),
t.test      = t.test(Z[1:n], Z[(n+1):(2*n)],var.equal = FALSE)$p.value,
var.test    = var.test(Z[1:n], Z[(n+1):(2*n)])$p.value
) < alpha
mean(stat[-1] > stat[1])
stat[-1]
stat[1]
res <- c(mean(stat[-1] > stat[1]),
t.test      = t.test(Z[1:n], Z[(n+1):(2*n)],var.equal = FALSE)$p.value,
var.test    = var.test(Z[1:n], Z[(n+1):(2*n)])$p.value
) < alpha
res
sum(res)
boolean(sum(res))
sum(res)>0
Power(t(replicate(M, c(rnorm(n,0,1), rnorm(n,2,1)))), exact = TRUE)
Power <- function(Zd, exact = FALSE) {
print("step")
rowMeans(apply(Zd,1,function(Z) {
stat <- K(Z)
perm <- if (exact) exact_perm(Z[1:5], Z[6:10]) else t(replicate(D,sample(Z)))
stat <- c(stat, t(apply(perm,1,function(Zp) { K(Zp) })))
res <- c(mean(stat[-1] > stat[1]),
t.test      = t.test(Z[1:n], Z[(n+1):(2*n)],var.equal = FALSE)$p.value,
var.test    = var.test(Z[1:n], Z[(n+1):(2*n)])$p.value
) < alpha
sum(res)>0
}))
}
(
)
Power(t(replicate(M, c(rnorm(n,0,1), rnorm(n,2,1)))), exact = TRUE)
Power <- function(Zd, exact = FALSE) {
print("step")
mean(apply(Zd,1,function(Z) {
stat <- K(Z)
perm <- if (exact) exact_perm(Z[1:5], Z[6:10]) else t(replicate(D,sample(Z)))
stat <- c(stat, t(apply(perm,1,function(Zp) { K(Zp) })))
res <- c(mean(stat[-1] > stat[1]),
t.test      = t.test(Z[1:n], Z[(n+1):(2*n)],var.equal = FALSE)$p.value,
var.test    = var.test(Z[1:n], Z[(n+1):(2*n)])$p.value
) < alpha
sum(res)>0
}))
}
Power(t(replicate(M, c(rnorm(n,0,1), rnorm(n,2,1)))), exact = TRUE)
Power(t(replicate(M, c(rnorm(n,0,1), rnorm(n,0,1)))), exact = TRUE)
Power <- function(Zd, exact = FALSE) {
print("step")
mean(apply(Zd,1,function(Z) {
stat <- K(Z)
perm <- if (exact) exact_perm(Z[1:5], Z[6:10]) else t(replicate(D,sample(Z)))
stat <- c(stat, t(apply(perm,1,function(Zp) { K(Zp) })))
res <- c(mean(stat[-1] > stat[1]),
t.test      = t.test(Z[1:n], Z[(n+1):(2*n)],var.equal = FALSE)$p.value,
var.test    = var.test(Z[1:n], Z[(n+1):(2*n)])$p.value
) < alpha/3
sum(res)>0
}))
}
Power(t(replicate(M, c(rnorm(n,0,1), rnorm(n,0,1)))), exact = TRUE)
Power <- function(Zd, exact = FALSE) {
print("step")
mean(apply(Zd,1,function(Z) {
stat <- K(Z)
perm <- if (exact) exact_perm(Z[1:5], Z[6:10]) else t(replicate(D,sample(Z)))
stat <- c(stat, t(apply(perm,1,function(Zp) { K(Zp) })))
res <- c(mean(stat[-1] > stat[1]),
t.test      = t.test(Z[1:n], Z[(n+1):(2*n)],var.equal = FALSE)$p.value,
var.test    = var.test(Z[1:n], Z[(n+1):(2*n)])$p.value
) < alpha
sum(res)>0
}))
}
Power(t(replicate(M, c(rnorm(n,0,1), rnorm(n,0,1)))), exact = TRUE)
K <- function(Z) {
X1 <- Z[1:n]
X2 <- Z[(n+1):(2*n)]
mX1 <- mean(X1)
mX2 <- mean(X2)
vX1 <- sum((X1-mX1)**2)/n
vX2 <- sum((X2-mX2)**2)/n
c(NC = new_norm_criterion = (vX1+(mX1-mX2)**2)/vX2 + (vX2+(mX1-mX2)**2)/vX1)
}
K <- function(Z) {
X1 <- Z[1:n]
X2 <- Z[(n+1):(2*n)]
mX1 <- mean(X1)
mX2 <- mean(X2)
vX1 <- sum((X1-mX1)**2)/n
vX2 <- sum((X2-mX2)**2)/n
c(NC = new_norm_criterion = (vX1+(mX1-mX2)**2)/vX2 + (vX2+(mX1-mX2)**2)/vX1)
}
K <- function(Z) {
X1 <- Z[1:n]
X2 <- Z[(n+1):(2*n)]
mX1 <- mean(X1)
mX2 <- mean(X2)
vX1 <- sum((X1-mX1)**2)/n
vX2 <- sum((X2-mX2)**2)/n
c(NC = (vX1+(mX1-mX2)**2)/vX2 + (vX2+(mX1-mX2)**2)/vX1)
}
Power <- function(Zd, exact = FALSE) {
print("step")
mean(apply(Zd,1,function(Z) {
stat <- K(Z)
perm <- if (exact) exact_perm(Z[1:5], Z[6:10]) else t(replicate(D,sample(Z)))
stat <- c(stat, t(apply(perm,1,function(Zp) { K(Zp) })))
res <- c(mean(stat[-1] > stat[1]),
t.test      = t.test(Z[1:n], Z[(n+1):(2*n)],var.equal = FALSE)$p.value,
var.test    = var.test(Z[1:n], Z[(n+1):(2*n)])$p.value
) < alpha
sum(res)>0
}))
}
alpha <- 0.05
n <- 5
M <- 1000
D <- 800
Power(t(replicate(M, c(rnorm(n,0,1), rnorm(n,0,1)))), exact = TRUE)
Power <- function(Zd, exact = FALSE) {
print("step")
mean(apply(Zd,1,function(Z) {
stat <- K(Z)
perm <- if (exact) exact_perm(Z[1:5], Z[6:10]) else t(replicate(D,sample(Z)))
stat <- c(stat, t(apply(perm,1,function(Zp) { K(Zp) })))
res <- c(mean(stat[-1] > stat[1]),
t.test      = t.test(Z[1:n], Z[(n+1):(2*n)],var.equal = FALSE)$p.value,
var.test    = var.test(Z[1:n], Z[(n+1):(2*n)])$p.value
) < alpha
res <- c(res, concat = sum(res)>0)
}))
}
Power <- function(Zd, exact = FALSE) {
print("step")
rowMeans(apply(Zd,1,function(Z) {
stat <- K(Z)
perm <- if (exact) exact_perm(Z[1:5], Z[6:10]) else t(replicate(D,sample(Z)))
stat <- c(stat, t(apply(perm,1,function(Zp) { K(Zp) })))
res <- c(mean(stat[-1] > stat[1]),
t.test      = t.test(Z[1:n], Z[(n+1):(2*n)],var.equal = FALSE)$p.value,
var.test    = var.test(Z[1:n], Z[(n+1):(2*n)])$p.value
) < alpha
res <- c(res, concat = sum(res)>0)
}))
}
Power(t(replicate(M, c(rnorm(n,0,1), rnorm(n,0,1)))), exact = TRUE)
Power <- function(Zd, exact = FALSE) {
print("step")
rowMeans(apply(Zd,1,function(Z) {
stat <- K(Z)
perm <- if (exact) exact_perm(Z[1:5], Z[6:10]) else t(replicate(D,sample(Z)))
stat <- c(stat, t(apply(perm,1,function(Zp) { K(Zp) })))
res <- c(NC = mean(stat[-1] > stat[1]),
t.test      = t.test(Z[1:n], Z[(n+1):(2*n)],var.equal = FALSE)$p.value,
var.test    = var.test(Z[1:n], Z[(n+1):(2*n)])$p.value
) < alpha
res <- c(res, concat = sum(res)>0)
}))
}
Power(t(replicate(M, c(rnorm(n,0,1), rnorm(n,0,1)))), exact = TRUE)
Power <- function(Zd, exact = FALSE) {
print("step")
rowMeans(apply(Zd,1,function(Z) {
stat <- K(Z)
perm <- if (exact) exact_perm(Z[1:5], Z[6:10]) else t(replicate(D,sample(Z)))
stat <- c(stat, t(apply(perm,1,function(Zp) { K(Zp) })))
res <- c(NC = mean(stat[-1] > stat[1]),
t.test      = t.test(Z[1:n], Z[(n+1):(2*n)],var.equal = FALSE)$p.value,
var.test    = var.test(Z[1:n], Z[(n+1):(2*n)])$p.value
) < alpha/2
res <- c(res, concat = sum(res)>0)
}))
}
Power(t(replicate(M, c(rnorm(n,0,1), rnorm(n,0,1)))), exact = TRUE)
Power(t(replicate(M, c(rnorm(n,0,1), rnorm(n,0,1)))), exact = TRUE)
Power(t(replicate(M, c(rnorm(n,0,1), rnorm(n,0,1)))), exact = TRUE)
Power(t(replicate(M, c(rnorm(n,0,1), rnorm(n,0,1)))), exact = TRUE)
Power(t(replicate(M, c(rnorm(n,0,1), rnorm(n,2,1)))), exact = TRUE)
Power(t(replicate(M, c(rnorm(n,0,1), rnorm(n,2,1)))), exact = TRUE)
Power(t(replicate(M, c(rnorm(n,0,1), rnorm(n,2,1)))), exact = TRUE)
Power <- function(Zd, exact = FALSE) {
print("step")
rowMeans(apply(Zd,1,function(Z) {
stat <- K(Z)
perm <- if (exact) exact_perm(Z[1:5], Z[6:10]) else t(replicate(D,sample(Z)))
stat <- c(stat, t(apply(perm,1,function(Zp) { K(Zp) })))
res <- c(NC = mean(stat[-1] > stat[1]),
var.test    = var.test(Z[1:n], Z[(n+1):(2*n)])$p.value
) < alpha/2
res <- c(res, concat = sum(res)>0)
}))
}
Power <- function(Zd, exact = FALSE) {
print("step")
rowMeans(apply(Zd,1,function(Z) {
stat <- K(Z)
perm <- if (exact) exact_perm(Z[1:5], Z[6:10]) else t(replicate(D,sample(Z)))
stat <- c(stat, t(apply(perm,1,function(Zp) { K(Zp) })))
res <- c(NC = mean(stat[-1] > stat[1]),
var.test    = var.test(Z[1:n], Z[(n+1):(2*n)])$p.value
) < alpha
res <- c(res, concat = sum(res)>0)
}))
}
Power(t(replicate(M, c(rnorm(n,0,1), rnorm(n,2,1)))), exact = TRUE)
Power(t(replicate(M, c(rnorm(n,0,1), rnorm(n,0,1)))), exact = TRUE)
Power <- function(Zd, exact = FALSE) {
print("step")
rowMeans(apply(Zd,1,function(Z) {
stat <- K(Z)
perm <- if (exact) exact_perm(Z[1:5], Z[6:10]) else t(replicate(D,sample(Z)))
stat <- c(stat, t(apply(perm,1,function(Zp) { K(Zp) })))
res <- c(NC = mean(stat[-1] > stat[1]),
t.test      = t.test(Z[1:n], Z[(n+1):(2*n)],var.equal = FALSE)$p.value
) < alpha
res <- c(res, concat = sum(res)>0)
}))
}
Power(t(replicate(M, c(rnorm(n,0,1), rnorm(n,0,1)))), exact = TRUE)
Power(t(replicate(M, c(rnorm(n,0,1), rnorm(n,0,1)))), exact = TRUE)
Power <- function(Zd, exact = FALSE) {
print("step")
rowMeans(apply(Zd,1,function(Z) {
stat <- K(Z)
perm <- if (exact) exact_perm(Z[1:5], Z[6:10]) else t(replicate(D,sample(Z)))
stat <- c(stat, t(apply(perm,1,function(Zp) { K(Zp) })))
res <- c(t.test      = t.test(Z[1:n], Z[(n+1):(2*n)],var.equal = FALSE)$p.value,
var.test    = var.test(Z[1:n], Z[(n+1):(2*n)])$p.value
) < alpha
res <- c(res, concat = sum(res)>0)
}))
}
Power <- function(Zd, exact = FALSE) {
print("step")
rowMeans(apply(Zd,1,function(Z) {
stat <- K(Z)
perm <- if (exact) exact_perm(Z[1:5], Z[6:10]) else t(replicate(D,sample(Z)))
stat <- c(stat, t(apply(perm,1,function(Zp) { K(Zp) })))
res <- c(NC = mean(stat[-1] > stat[1]),
t.test      = t.test(Z[1:n], Z[(n+1):(2*n)],var.equal = FALSE)$p.value
) < alpha
res <- c(res, concat = sum(res)>0)
}))
}
Power(t(replicate(M, c(rnorm(n,0,1), rnorm(n,0,1)))), exact = TRUE)
Power <- function(Zd, exact = FALSE) {
print("step")
rowMeans(apply(Zd,1,function(Z) {
stat <- K(Z)
perm <- if (exact) exact_perm(Z[1:5], Z[6:10]) else t(replicate(D,sample(Z)))
stat <- c(stat, t(apply(perm,1,function(Zp) { K(Zp) })))
res <- c(
t.test      = t.test(Z[1:n], Z[(n+1):(2*n)],var.equal = FALSE)$p.value,
var.test    = var.test(Z[1:n], Z[(n+1):(2*n)])$p.value
) < alpha
res <- c(res, concat = sum(res)>0)
}))
}
Power(t(replicate(M, c(rnorm(n,0,1), rnorm(n,0,1)))), exact = TRUE)
Power(t(replicate(M, c(rnorm(n,0,1), rnorm(n,0,1)))), exact = TRUE)
Power <- function(Zd, exact = FALSE) {
print("step")
rowMeans(apply(Zd,1,function(Z) {
stat <- K(Z)
perm <- if (exact) exact_perm(Z[1:5], Z[6:10]) else t(replicate(D,sample(Z)))
stat <- c(stat, t(apply(perm,1,function(Zp) { K(Zp) })))
res <- c(
t.test      = t.test(Z[1:n], Z[(n+1):(2*n)],var.equal = FALSE)$p.value,
var.test    = var.test(Z[1:n], Z[(n+1):(2*n)])$p.value
) < alpha
res <- c(res, concat = sum(res)>0)
}))
}
Power(t(replicate(M, c(rnorm(n,0,1), rnorm(n,0,1)))), exact = TRUE)
Power(t(replicate(M, c(rnorm(n,0,1), rnorm(n,0,1)))), exact = TRUE)
Power(t(replicate(M, c(rnorm(n,0,1), rnorm(n,0,1)))), exact = TRUE)
Power <- function(Zd, exact = FALSE) {
print("step")
rowMeans(apply(Zd,1,function(Z) {
stat <- K(Z)
perm <- if (exact) exact_perm(Z[1:5], Z[6:10]) else t(replicate(D,sample(Z)))
stat <- c(stat, t(apply(perm,1,function(Zp) { K(Zp) })))
res <- c(NC = mean(stat[-1] > stat[1]),
t.test      = t.test(Z[1:n], Z[(n+1):(2*n)],var.equal = FALSE)$p.value,
var.test    = var.test(Z[1:n], Z[(n+1):(2*n)])$p.value
) < alpha
res <- c(res, concat = sum(res)>0)
}))
}
Power(t(replicate(M, c(rnorm(n,0,1), rnorm(n,0,1)))), exact = TRUE)
Power(t(replicate(M, c(rnorm(n,0,1), rnorm(n,0,1)))), exact = TRUE)
Power(t(replicate(M, c(rnorm(n,0,1), rnorm(n,0,1)))), exact = TRUE)
K <- function(Z, A) {
X1 <- Z[1:n]
X2 <- Z[(n+1):(2*n)]
mX1 <- mean(X1)
mX2 <- mean(X2)
vX1 <- sum((X1-mX1)**2)/n
vX2 <- sum((X2-mX2)**2)/n
X1med <- median(X1)
X2med <- median(X2)
tmp <- vector()
for (i in Z[-(1:n)])
tmp <- c(tmp, abs(i - Z[1:n]))
tmpA <- tmp/A
c(K1 = sum(tmp),
K2 = (mX1-mX2)**2,
L1 = sum(log(1+tmp)),
L1C = sum(log(1+tmpA)),
L2 = sum(log(1+tmp**2)),
L2C = sum(log(1+tmpA**2)),
L0.5 = sum(log(1+tmp**.5)),
L0.5C = sum(log(1+tmpA**.5)),
K10 = sum(log(tmp)),
new_norm_criterion = (vX1+(mX1-mX2)**2)/vX2 + (vX2+(mX1-mX2)**2)/vX1,
new_cauchy_criterion = sum(log( 1 + abs( X1-X2med )**2 / C(X2, X2med) )) + sum(log( 1 + abs( X2-X1med )**2 / C(X1, X1med) ))
)
}
source('/home/d/Study/new_criteria/func/funcs.R')
alpha <- 0.05
n <- 5
M <- 1000
D <- 800
Power(t(replicate(M, c(rcauchy(n,0,1), rcauchy(n,2,1)))), exact = TRUE)
Power(t(replicate(M, c(rcauchy(n,0,1), rcauchy(n,2,1)))), exact = TRUE)
Power(t(replicate(M, c(rcauchy(n,0,1), rcauchy(n,2,3)))), exact = TRUE)
res
res[1]
res[t.test]
res['t.test']
res
mean(stat[-1] > stat[1])
t.test(Z[1:n], Z[(n+1):(2*n)],var.equal = FALSE)$p.value
var.test(Z[1:n], Z[(n+1):(2*n)])$p.value
res <- c(NC = mean(stat[-1] > stat[1]),
t.test      = t.test(Z[1:n], Z[(n+1):(2*n)],var.equal = FALSE)$p.value,
var.test    = var.test(Z[1:n], Z[(n+1):(2*n)])$p.value
) < alpha
res
if (res['t.test']) {
res <- c(res, concat = TRUE)
} else if (res['var.test']) {
res <- c(res, concat = TRUE)
} else {
res <- c(res, concat = res['NC'])
}
res
Power <- function(Zd, exact = FALSE) {
print("step")
rowMeans(apply(Zd,1,function(Z) {
stat <- K(Z)
perm <- if (exact) exact_perm(Z[1:5], Z[6:10]) else t(replicate(D,sample(Z)))
stat <- c(stat, t(apply(perm,1,function(Zp) { K(Zp) })))
res <- c(NC = mean(stat[-1] > stat[1]),
t.test      = t.test(Z[1:n], Z[(n+1):(2*n)],var.equal = FALSE)$p.value,
var.test    = var.test(Z[1:n], Z[(n+1):(2*n)])$p.value
) < alpha
if (res['t.test']) {
res <- c(res, concat = TRUE)
} else if (res['var.test']) {
res <- c(res, concat = TRUE)
} else {
res <- c(res, concat = res['NC'])
}
res
}))
}
alpha <- 0.05
n <- 5
M <- 1000
D <- 800
Power(t(replicate(M, c(rnorm(n,0,1), rnorm(n,0,1)))), exact = TRUE)
exact_perm <- function(X, Y) {
perms <- c(X,Y)
for (i in 1:5)
for (j in 1:5) {
x <- X
y <- Y
tmp <- x[i]
x[i] <- y[j]
y[j] <- tmp
perms <- rbind(perms, c(x,y))
}
i <- c(1,2,1,2)
while(TRUE) {
x <- X
y <- Y
tmp <- x[c(i[1],i[2])]
x[c(i[1],i[2])] <- y[c(i[3],i[4])]
y[c(i[3],i[4])] <- tmp
perms <- rbind(perms, c(x,y))
if (i[4] > 4) {
if (i[3] > 3) {
if (i[2] > 4) {
if (i[1] > 3)
break
else {
i[1] <- i[1]+1
i[2] <- i[1]+1
i[3] <- 1
i[4] <- 2
}
} else {
i[2] <- i[2]+1
i[3] <- 1
i[4] <- 2
}
} else {
i[3] <- i[3]+1
i[4] <- i[3]+1
}
} else {
i[4] <- i[4]+1
}
}
perms
}
K <- function(Z) {
X1 <- Z[1:n]
X2 <- Z[(n+1):(2*n)]
mX1 <- mean(X1)
mX2 <- mean(X2)
vX1 <- sum((X1-mX1)**2)/n
vX2 <- sum((X2-mX2)**2)/n
c(NC = (vX1+(mX1-mX2)**2)/vX2 + (vX2+(mX1-mX2)**2)/vX1)
}
Power <- function(Zd, exact = FALSE) {
print("step")
rowMeans(apply(Zd,1,function(Z) {
stat <- K(Z)
perm <- if (exact) exact_perm(Z[1:5], Z[6:10]) else t(replicate(D,sample(Z)))
stat <- c(stat, t(apply(perm,1,function(Zp) { K(Zp) })))
res <- c(NC = mean(stat[-1] > stat[1]),
t.test      = t.test(Z[1:n], Z[(n+1):(2*n)],var.equal = FALSE)$p.value,
var.test    = var.test(Z[1:n], Z[(n+1):(2*n)])$p.value
) < alpha
if (res['t.test']) {
res <- c(res, concat = TRUE)
} else if (res['var.test']) {
res <- c(res, concat = TRUE)
} else {
res <- c(res, concat = res['NC'])
}
res
}))
}
alpha <- 0.05
n <- 5
M <- 1000
D <- 800
Power(t(replicate(M, c(rnorm(n,0,1), rnorm(n,0,1)))), exact = TRUE)
source('/home/d/Study/new_criteria/func/funcs.R')
Power(t(replicate(M, c(rcauchy(n,0,1), rcauchy(n,4,1)))), exact = TRUE)
